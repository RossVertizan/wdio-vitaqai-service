################################################################################
# File created with yaml_write
#   (2015-12-30 13:56:09)
################################################################################

Bin< T >:
  - "add_range()"
  - "add_value()"
  - "clear_ranges()"
  - "display()"
  - "hit()"
  - "to_string()"

BinBase:
  - "add_reference_bin()"
  - "clear_ranges()"
  - "get_grade()"
  - "get_hit_count()"
  - "get_is_ignore_bin()"
  - "get_is_illegal_bin()"
  - "get_parent_item()"
  - "get_target()"
  - "hit()"
  - "report()"
  - "set_hits()"
  - "set_is_ignore_bin()"
  - "set_is_illegal_bin()"
  - "set_target()"

BinEntry:
  - "BinEntry()"
  - "get_grade()"
  - "get_hit_count()"
  - "get_id()"
  - "get_name()"
  - "get_target()"
  - "get_weight()"
  - "~BinEntry()"

Configuration:
  - "get_cross_delimiter()"
  - "get_indent()"
  - "get_name_width()"
  - "get_num_width()"
  - "get_off_when_full()"
  - "get_precision()"
  - "get_range_separator()"
  - "get_transition_delimiter()"
  - "get_width()"
  - "set_cross_delimiter()"
  - "set_indent()"
  - "set_name_width()"
  - "set_num_width()"
  - "set_off_when_full()"
  - "set_precision()"
  - "set_range_separator()"
  - "set_transition_delimiter()"
  - "set_width()"

CoverageObject:
  - "collection_off"
  - "get_collection_off()"
  - "get_grade()"
  - "get_monitor()"
  - "get_parent()"
  - "get_weight()"
  - "local_cfg"
  - "mon_p"
  - "set_collection_off()"
  - "set_name()"
  - "set_weight()"

Covergroup:
  - "Covergroup()"
  - "add_cross_item()"
  - "add_item()"
  - "add_sequence_item()"
  - "add_transition_item()"
  - "clear_hit_status()"
  - "cross_item_name_is_unique()"
  - "get_cross_item()"
  - "get_grade()"
  - "get_item()"
  - "get_num_cross_items()"
  - "get_num_items()"
  - "get_num_sequence_items()"
  - "get_num_transition_items()"
  - "get_sequence_item()"
  - "get_transition_item()"
  - "item_name_is_unique()"
  - "redirect_stderr()"
  - "redirect_stdout()"
  - "sequence_item_name_is_unique()"
  - "set_report_level()"
  - "transition_item_name_is_unique()"
  - "trigger()"

CovergroupEntry:
  - "CovergroupEntry()"
  - "get_grade()"
  - "get_id()"
  - "get_item()"
  - "get_name()"
  - "get_num_items()"
  - "get_weight()"
  - "~CovergroupEntry()"
CrossItem:
  - "add_bin()"
  - "add_bin()"
  - "add_item()"
  - "hit()"

GdbAdapter:
  - "add_dbg_break()"
  - "cont()"
  - "del_dbg_break()"
  - "fetch_all_in_scope_variables()"
  - "finish()"
  - "gdb_cmd()"
  - "gdb_eval_expr()"
  - "get_enable_async_records()"
  - "get_enable_console_output()"
  - "get_enable_gdb_command()"
  - "get_enable_gdb_prompt()"
  - "get_enable_log_output()"
  - "get_enable_result_records()"
  - "get_enable_target_output()"
  - "get_enable_var_probes()"
  - "pre_gdb_exec()"
  - "run()"
  - "set_all_gdb_output()"
  - "set_enable_async_records()"
  - "set_enable_console_output()"
  - "set_enable_gdb_command()"
  - "set_enable_gdb_prompt()"
  - "set_enable_log_output()"
  - "set_enable_result_records()"
  - "set_enable_target_output()"
  - "set_enable_var_probes()"
  - "setup()"
  - "trigger()"
  - "~GdbAdapter()"

GenClass:
  - "GenClass()"
  - "add_to_pack_order()"
  - "clear_pack_order()"
**  - "do_not_generate()"
  - "gen()"
  - "gen_tree()"
  - "get_gen_class()"
  - "get_gen_field()"
  - "get_num_gen_classes()"
  - "get_num_gen_fields()"
  - "get_num_pack_order_objects()"
  - "get_pack_order_object()"
  - "get_parent()"
  - "get_seed()"
  - "implies()"
  - "keep()"
  - "pack()"
              - "post_field_gen()"
              - "post_gen()"
              - "post_sub_class_gen()"
              - "pre_field_gen()"
              - "pre_gen()"
              - "pre_sub_class_gen()"
  - "redirect_stderr()"
  - "redirect_stdout()"
  - "remove_from_pack_order()"
**  - "report_seed()"
  - "set_active()"
  - "set_parent()"
  - "set_report_level()"
  - "set_seed()"
  - "to_string()"

GenField< T >:
  - "GenField()"
  - "add_distribution()"
  - "add_distribution_value()"
  - "add_dynamic_distribution()"
  - "add_dynamic_distribution_value()"
          - "allow_only_range()"
          - "allow_only_value()"
          - "allow_only_values()"
          - "allow_range()"
          - "allow_value()"
          - "allow_values()"
          - "clear_dynamic_ranges()"
          - "disallow_range()"
          - "disallow_value()"
          - "disallow_values()"
          - "dynamic_allow_only_range()"
          - "dynamic_allow_only_value()"
          - "dynamic_allow_only_values()"
          - "dynamic_allow_range()"
          - "dynamic_allow_value()"
          - "dynamic_allow_values()"
          - "dynamic_disallow_range()"
          - "dynamic_disallow_value()"
          - "dynamic_disallow_values()"
  - "gen()"
  - "has_allowable_values()"
  - "is_in_range()"
  - "is_not_in_range()"
  - "is_not_value()"
  - "is_value()"
  - "max()"
  - "max()"
  - "min()"
  - "operator!=()"
  - "operator<()"
  - "operator<=()"
  - "operator==()"
  - "operator>()"
  - "operator>=()"
  - "pack()"
  - "redirect_stderr()"
  - "redirect_stdout()"
  - "reset_distribution()"
  - "reset_ranges()"
  - "set_parent()"
  - "set_physical_width()"
  - "set_physical_width()"
  - "set_report_level()"
  - "set_value()"
  - "to_string()"
  - "~GenField()"

GenFieldBase:
  - "GenFieldBase()"
  - "do_not_generate()"
  - "do_not_repeat()"
  - "gen()"
  - "get_active()"
  - "get_do_not_repeat()"
  - "get_parent()"
  - "get_physical()"
  - "get_physical_width()"
  - "get_seed()"
  - "get_static()"
  - "has_allowable_values()"
  - "redirect_stderr()"
  - "redirect_stdout()"
  - "set_active()"
  - "set_parent()"
  - "set_physical()"
  - "set_physical_width()"
  - "set_report_level()"
  - "set_seed()"
  - "set_static()"
  - "to_string()"
  - "~GenFieldBase()"
GenLimits< T >:
  - "max()"
  - "max()"
  - "min()"
  - "width()"
GenObject:
  - "do_not_generate()"
  - "get_active()"
  - "get_do_not_generate()"
  - "set_active()"
  - "set_name()"

GenSequence:
  - "GenSequence()"
  - "abort()"
  - "add_dynamic_weight()"
  - "add_next()"
  - "clear_call_count()"
  - "display_next_sequences()"
  - "do_seq()"
**  - "get_call_count()"
**  - "get_call_limit()"
  - "get_delete_on_complete()"
  - "get_id()"
**  - "get_previous()"
  - "get_progress_on_complete()"
  - "get_remove_on_complete()"
  - "next_sequences()"
  - "number_active_next_sequences()"
  - "number_next_sequences()"
  - "pre_next_sequence()"
**  - "remove_all_next()"
  - "remove_from_callers()"
**  - "remove_next()"
  - "run_seq()"
  - "sequence_complete()"
**  - "set_call_limit()"
  - "set_delete_on_complete()"
  - "set_enabled()"
**  - "set_exhaustive()"
  - "set_max_sequence_depth()"
**  - "set_progress_on_complete()"
  - "set_remove_on_complete()"
  - "~GenSequence()"

Item< T >:
  - "Item"
  - "add_bin()"
  - "add_bin()"
  - "add_default_bin()"
  - "add_ignore_bin()"
  - "add_illegal_bin()"
  - "clear_hit_status()"
  - "display()"
  - "get_bin()"
  - "get_bin_base()"
  - "get_bin_name()"
  - "get_grade()"
  - "get_is_ignore_bin()"
  - "get_is_illegal_bin()"
  - "get_num_bins()"
  - "hit()"
  - "hit()"
  - "hit()"
  - "hit_int()"
  - "redirect_stderr()"
  - "redirect_stdout()"
  - "set_bins_ignore()"
  - "set_bins_illegal()"
  - "set_bit_range()"
  - "set_report_level()"
  - "to_string()"
  - "~Item()"

ItemBase:
  - "clear_triggered_by_covergroup()"
  - "get_bin_base()"
  - "get_bin_name()"
  - "get_grade()"
  - "get_in_cov_db()"
  - "get_is_ignore_bin()"
  - "get_is_illegal_bin()"
  - "get_num_bins()"
  - "get_trigger_ena()"
  - "get_trigger_ena_bin()"
  - "get_triggered_by_covergroup()"
  - "get_var_width_in_bytes()"
  - "hit()"
  - "hit_int()"
  - "redirect_stderr()"
  - "redirect_stdout()"
  - "set_bins_ignore()"
  - "set_bins_illegal()"
  - "set_bit_range()"
  - "set_in_cov_db()"
  - "set_report_level()"
  - "set_trigger_ena()"
  - "set_trigger_ena_bin()"
  - "set_triggered_by_covergroup()"

ItemEntry:
  - "ItemEntry()"
  - "get_bin()"
  - "get_grade()"
  - "get_id()"
  - "get_name()"
  - "get_num_bins()"
  - "get_type()"
  - "get_weight()"
  - "~ItemEntry()"

Monitor:
  - "Monitor()"
  - "construct_all_coverage_sql()"
  - "construct_all_coverage_sql_non_blocking()"
  - "get_confidence()"
  - "get_cost()"
  - "get_covergroup()"
  - "get_dut_release()"
  - "get_exec_command()"
  - "get_host_id()"
  - "get_id()"
  - "get_maturity()"
  - "get_num_covergroups()"
  - "get_project_name()"
  - "get_regression_name()"
  - "get_relevance()"
  - "get_repeatability()"
  - "get_results_data()"
  - "get_stimulus_data()"
  - "get_test_location()"
  - "get_test_name()"
  - "get_user_id()"
  - "get_ve_release()"
  - "redirect_stderr()"
  - "redirect_stdout()"
  - "report_all_coverage()"
  - "set_confidence()"
  - "set_cost()"
  - "set_dut_release()"
  - "set_exec_command()"
  - "set_fail()"
  - "set_host_id()"
  - "set_maturity()"
  - "set_pass()"
  - "set_project_name()"
  - "set_regression_name()"
  - "set_relevance()"
  - "set_repeatability()"
  - "set_report_level()"
  - "set_results_data()"
  - "set_stimulus_data()"
  - "set_test_exec_time()"
  - "set_test_location()"
  - "set_test_name()"
  - "set_test_seed()"
  - "set_user_id()"
  - "set_ve_release()"
  - "str2sql_database_type()"
  - "update_all_modified_bins_sql()"
  - "~Monitor()"

Query:
  - "AND"
  - "Ascending"
  - "Bin"
  - "BinColumn"
  - "BinGrade"
  - "BinHits"
  - "BinId"
  - "BinName"
  - "BinTarget"
  - "BinWeight"
  - "Confidence"
  - "Cost"
  - "CountOnly"
  - "Covergroup()"
  - "CovergroupColumn"
  - "CovergroupGrade"
  - "CovergroupId"
  - "CovergroupName"
  - "CovergroupWeight"
  - "Descending"
  - "DutRelease"
  - "ExecCommand"
  - "FilterOperator"
  - "Flat"
  - "HostId"
  - "Item"
  - "ItemColumn"
  - "ItemGrade"
  - "ItemId"
  - "ItemName"
  - "ItemType"
  - "ItemWeight"
  - "Maturity"
  - "MergeTestMode"
  - "OR"
  - "ProjectName"
  - "Query()"
  - "QueryDepth"
  - "RegressionName"
  - "Relevance"
  - "Repeatability"
  - "ResultsData"
  - "SortOrderDirection"
  - "StartDateTime"
  - "StimulusData"
  - "Test"
  - "TestColumn"
  - "TestEntryKind"
  - "TestExecTime"
  - "TestGrade"
  - "TestId"
  - "TestLocation"
  - "TestName"
  - "TestPassFail"
  - "TestSeed"
  - "Tree"
  - "UserId"
  - "VeRelease"
  - "add_bin_filter()"
  - "add_covergroup_filter()"
  - "add_item_filter()"
  - "add_test_filter()"
  - "clear_filters()"
  - "delete_tests()"
  - "fetch()"
  - "get_num_tests()"
  - "get_test()"
  - "merge_tests()"
  - "set_bin_order()"
  - "set_covergroup_order()"
  - "set_item_order()"
  - "set_test_order()"
  - "~Query()"

Reporter:
  - "check()"
  - "error()"
  - "error_continue()"
  - "get_continue_on_error()"
  - "get_error_count()"
  - "get_prefix()"
  - "get_report_level()"
  - "get_stderr_filename()"
  - "get_stdout_filename()"
  - "get_warning_count()"
  - "info()"
  - "match_report_level()"
  - "redirect_stderr()"
  - "redirect_stdout()"
  - "reset_error_count()"
  - "reset_warning_count()"
  - "set_continue_on_error()"
  - "set_prefix()"
  - "set_report_level()"
  - "warning()"

SequenceItem:
  - "add_condition()"
  - "add_entry_cycles()"
  - "add_reference_item()"
  - "add_repeats_cover_item()"
  - "add_state()"
  - "add_state_callback()"
  - "add_state_repeats()"
  - "add_tag()"
  - "allow_exit_state_match()"
  - "allow_multiple_consumption()"
  - "get_number_of_active_sequences()"
  - "hit()"
  - "set_report_level()"
SequenceItem ,:
  - "export_graph()"

SoftwareAdapter:
  - "add_breakpoint()"
  - "add_dbg_break()"
  - "add_var_to_monitor()"
  - "cont()"
  - "del_breakpoint()"
  - "del_dbg_break()"
  - "del_var_to_monitor()"
  - "display_breakpoints()"
  - "fetch_all_in_scope_variables()"
  - "finish()"
  - "get_breakpoint_id()"
  - "get_pc()"
  - "get_scope()"
  - "run()"
  - "setup()"
  - "trigger()"
StateCallback< T >:
  - "StateCallback()"
  - "set_callback()"
  - "tFunction"

TestEntry:
  - "TestEntry()"
  - "get_confidence()"
  - "get_cost()"
  - "get_covergroup()"
  - "get_dut_release()"
  - "get_exec_command()"
  - "get_grade()"
  - "get_host_id()"
  - "get_id()"
  - "get_maturity()"
  - "get_name()"
  - "get_num_covergroups()"
  - "get_num_tests()"
  - "get_project_name()"
  - "get_regression_name()"
  - "get_relevance()"
  - "get_repeatability()"
  - "get_results_data()"
  - "get_start_date_time()"
  - "get_stimulus_data()"
  - "get_test()"
  - "get_test_entry_kind()"
  - "get_test_exec_time()"
  - "get_test_location()"
  - "get_test_pass_fail()"
  - "get_test_seed()"
  - "get_user_id()"
  - "get_ve_release()"
  - "~TestEntry()"
TransitionItem:
  - "build_transition_bins()"
  - "hit()"
VitaqName:
  - "get_name()"
  - "set_name()"

VitaqValue< T >:
  - "clear_history()"
  - "get_history_depth()"
  - "get_value()"
  - "get_value_ptr()"
  - "set_history_depth()"
  - "set_value()"
  - "to_string()"
